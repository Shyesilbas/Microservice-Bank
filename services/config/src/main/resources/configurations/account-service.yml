server:
  port: 8060

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/account
    username: postgres
    password: 1234

  jpa:
    hibernate:
      ddl-auto: update

  redis:
    host: localhost
    port: 6379
  cache:
    type: redis

springdoc:
  swagger-ui:
    path: /swagger-ui.html

  api-docs:
    path: /api-docs

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: circuitbreakers,health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      customerServiceCircuitBreaker:  # Circuit breaker örneği
        registerHealthIndicator: true  # Sağlık göstergesi kaydetsin mi?
        slidingWindowSize: 10           # Son 10 çağrıyı dikkate al
        failureRateThreshold: 30       # Hata oranı %50'yi geçerse devreyi aç
        waitDurationInOpenState: 6000  # Açık durumda 10 saniye beklesin
        permittedNumberOfCallsInHalfOpenState: 3  # Yarı açık durumda 3 çağrıya izin ver
        minimumNumberOfCalls: 5  # Hata oranı hesaplamak için en az 5 çağrı yapılmalı

      LoanServiceCircuitBreaker:
        registerHealthIndicator: true  # Sağlık göstergesi kaydetsin mi?
        slidingWindowSize: 10           # Son 10 çağrıyı dikkate al
        failureRateThreshold: 30        # Hata oranı %50'yi geçerse devreyi aç
        waitDurationInOpenState: 6000  # Açık durumda 10 saniye beklesin
        permittedNumberOfCallsInHalfOpenState: 3  # Yarı açık durumda 3 çağrıya izin ver
        minimumNumberOfCalls: 5

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer



logging:
  level:
    org.springframework.cache: TRACE
    org.springframework.data.redis: DEBUG
    com.serhat.bank: DEBUG
    io.lettuce.core: DEBUG

